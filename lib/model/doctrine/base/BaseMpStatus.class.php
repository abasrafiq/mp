<?php

/**
 * BaseMpStatus
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property integer $status_id
 * @property MpStatus $MpStatus
 * @property Doctrine_Collection $Departments
 * @property Doctrine_Collection $AccessLevels
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $Types
 * @property Doctrine_Collection $DataSources
 * @property Doctrine_Collection $Periods
 * @property Doctrine_Collection $Units
 * @property Doctrine_Collection $Countries
 * @property Doctrine_Collection $Gdps
 * @property Doctrine_Collection $GdpRecords
 * @property Doctrine_Collection $DocumentTypes
 * @property Doctrine_Collection $Documents
 * @property Doctrine_Collection $DocumentRecords
 * 
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method integer             getStatusId()        Returns the current record's "status_id" value
 * @method MpStatus            getMpStatus()        Returns the current record's "MpStatus" value
 * @method Doctrine_Collection getDepartments()     Returns the current record's "Departments" collection
 * @method Doctrine_Collection getAccessLevels()    Returns the current record's "AccessLevels" collection
 * @method Doctrine_Collection getUsers()           Returns the current record's "Users" collection
 * @method Doctrine_Collection getTypes()           Returns the current record's "Types" collection
 * @method Doctrine_Collection getDataSources()     Returns the current record's "DataSources" collection
 * @method Doctrine_Collection getPeriods()         Returns the current record's "Periods" collection
 * @method Doctrine_Collection getUnits()           Returns the current record's "Units" collection
 * @method Doctrine_Collection getCountries()       Returns the current record's "Countries" collection
 * @method Doctrine_Collection getGdps()            Returns the current record's "Gdps" collection
 * @method Doctrine_Collection getGdpRecords()      Returns the current record's "GdpRecords" collection
 * @method Doctrine_Collection getDocumentTypes()   Returns the current record's "DocumentTypes" collection
 * @method Doctrine_Collection getDocuments()       Returns the current record's "Documents" collection
 * @method Doctrine_Collection getDocumentRecords() Returns the current record's "DocumentRecords" collection
 * @method MpStatus            setName()            Sets the current record's "name" value
 * @method MpStatus            setDescription()     Sets the current record's "description" value
 * @method MpStatus            setStatusId()        Sets the current record's "status_id" value
 * @method MpStatus            setMpStatus()        Sets the current record's "MpStatus" value
 * @method MpStatus            setDepartments()     Sets the current record's "Departments" collection
 * @method MpStatus            setAccessLevels()    Sets the current record's "AccessLevels" collection
 * @method MpStatus            setUsers()           Sets the current record's "Users" collection
 * @method MpStatus            setTypes()           Sets the current record's "Types" collection
 * @method MpStatus            setDataSources()     Sets the current record's "DataSources" collection
 * @method MpStatus            setPeriods()         Sets the current record's "Periods" collection
 * @method MpStatus            setUnits()           Sets the current record's "Units" collection
 * @method MpStatus            setCountries()       Sets the current record's "Countries" collection
 * @method MpStatus            setGdps()            Sets the current record's "Gdps" collection
 * @method MpStatus            setGdpRecords()      Sets the current record's "GdpRecords" collection
 * @method MpStatus            setDocumentTypes()   Sets the current record's "DocumentTypes" collection
 * @method MpStatus            setDocuments()       Sets the current record's "Documents" collection
 * @method MpStatus            setDocumentRecords() Sets the current record's "DocumentRecords" collection
 * 
 * @package    MP
 * @subpackage model
 * @author     abas rafiq
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMpStatus extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mp_status');
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('description', 'string', 500, array(
             'type' => 'string',
             'length' => 500,
             ));
        $this->hasColumn('status_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MpStatus', array(
             'local' => 'status_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('MpDepartment as Departments', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpAccessLevel as AccessLevels', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpUser as Users', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpType as Types', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpDataSource as DataSources', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpPeriod as Periods', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpUnit as Units', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpCountry as Countries', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpGdp as Gdps', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpGdpRecord as GdpRecords', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpDocumentType as DocumentTypes', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpDocument as Documents', array(
             'local' => 'id',
             'foreign' => 'status_id'));

        $this->hasMany('MpDocumentRecord as DocumentRecords', array(
             'local' => 'id',
             'foreign' => 'status_id'));
    }
}