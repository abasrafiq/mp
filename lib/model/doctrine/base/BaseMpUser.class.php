<?php

/**
 * BaseMpUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $first_name
 * @property string $last_name
 * @property string $designation
 * @property string $gender
 * @property string $username
 * @property string $password
 * @property string $phone
 * @property string $email
 * @property string $address
 * @property integer $department_id
 * @property integer $access_level_id
 * @property timestamp $creation_date
 * @property timestamp $modification_date
 * @property integer $status_id
 * @property MpStatus $MpStatus
 * @property MpDepartment $MpDepartment
 * @property MpAccessLevel $MpAccessLevel
 * @property Doctrine_Collection $GdpRecords
 * @property Doctrine_Collection $DocumentRecords
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $BulkUploads
 * @property Doctrine_Collection $Sessions
 * 
 * @method string              getFirstName()         Returns the current record's "first_name" value
 * @method string              getLastName()          Returns the current record's "last_name" value
 * @method string              getDesignation()       Returns the current record's "designation" value
 * @method string              getGender()            Returns the current record's "gender" value
 * @method string              getUsername()          Returns the current record's "username" value
 * @method string              getPassword()          Returns the current record's "password" value
 * @method string              getPhone()             Returns the current record's "phone" value
 * @method string              getEmail()             Returns the current record's "email" value
 * @method string              getAddress()           Returns the current record's "address" value
 * @method integer             getDepartmentId()      Returns the current record's "department_id" value
 * @method integer             getAccessLevelId()     Returns the current record's "access_level_id" value
 * @method timestamp           getCreationDate()      Returns the current record's "creation_date" value
 * @method timestamp           getModificationDate()  Returns the current record's "modification_date" value
 * @method integer             getStatusId()          Returns the current record's "status_id" value
 * @method MpStatus            getMpStatus()          Returns the current record's "MpStatus" value
 * @method MpDepartment        getMpDepartment()      Returns the current record's "MpDepartment" value
 * @method MpAccessLevel       getMpAccessLevel()     Returns the current record's "MpAccessLevel" value
 * @method Doctrine_Collection getGdpRecords()        Returns the current record's "GdpRecords" collection
 * @method Doctrine_Collection getDocumentRecords()   Returns the current record's "DocumentRecords" collection
 * @method Doctrine_Collection getComments()          Returns the current record's "Comments" collection
 * @method Doctrine_Collection getBulkUploads()       Returns the current record's "BulkUploads" collection
 * @method Doctrine_Collection getSessions()          Returns the current record's "Sessions" collection
 * @method MpUser              setFirstName()         Sets the current record's "first_name" value
 * @method MpUser              setLastName()          Sets the current record's "last_name" value
 * @method MpUser              setDesignation()       Sets the current record's "designation" value
 * @method MpUser              setGender()            Sets the current record's "gender" value
 * @method MpUser              setUsername()          Sets the current record's "username" value
 * @method MpUser              setPassword()          Sets the current record's "password" value
 * @method MpUser              setPhone()             Sets the current record's "phone" value
 * @method MpUser              setEmail()             Sets the current record's "email" value
 * @method MpUser              setAddress()           Sets the current record's "address" value
 * @method MpUser              setDepartmentId()      Sets the current record's "department_id" value
 * @method MpUser              setAccessLevelId()     Sets the current record's "access_level_id" value
 * @method MpUser              setCreationDate()      Sets the current record's "creation_date" value
 * @method MpUser              setModificationDate()  Sets the current record's "modification_date" value
 * @method MpUser              setStatusId()          Sets the current record's "status_id" value
 * @method MpUser              setMpStatus()          Sets the current record's "MpStatus" value
 * @method MpUser              setMpDepartment()      Sets the current record's "MpDepartment" value
 * @method MpUser              setMpAccessLevel()     Sets the current record's "MpAccessLevel" value
 * @method MpUser              setGdpRecords()        Sets the current record's "GdpRecords" collection
 * @method MpUser              setDocumentRecords()   Sets the current record's "DocumentRecords" collection
 * @method MpUser              setComments()          Sets the current record's "Comments" collection
 * @method MpUser              setBulkUploads()       Sets the current record's "BulkUploads" collection
 * @method MpUser              setSessions()          Sets the current record's "Sessions" collection
 * 
 * @package    MP
 * @subpackage model
 * @author     abas rafiq
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMpUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mp_user');
        $this->hasColumn('first_name', 'string', 225, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 225,
             ));
        $this->hasColumn('last_name', 'string', 225, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 225,
             ));
        $this->hasColumn('designation', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('gender', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('username', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 20,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('phone', 'string', 30, array(
             'type' => 'string',
             'length' => 30,
             ));
        $this->hasColumn('email', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('address', 'string', 500, array(
             'type' => 'string',
             'length' => 500,
             ));
        $this->hasColumn('department_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('access_level_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('creation_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('modification_date', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('status_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MpStatus', array(
             'local' => 'status_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('MpDepartment', array(
             'local' => 'department_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('MpAccessLevel', array(
             'local' => 'access_level_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('MpGdpRecord as GdpRecords', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('MpDocumentRecord as DocumentRecords', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('MpUserComment as Comments', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('MpBulkUploadRecord as BulkUploads', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('MpSession as Sessions', array(
             'local' => 'id',
             'foreign' => 'user_id'));
    }
}